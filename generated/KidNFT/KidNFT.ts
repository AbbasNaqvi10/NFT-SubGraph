// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class KidNFT__getInformationsResult {
  value0: string;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: boolean;

  constructor(
    value0: string,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }

  getValue2(): Array<BigInt> {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }

  getValue5(): BigInt {
    return this.value5;
  }

  getValue6(): BigInt {
    return this.value6;
  }

  getValue7(): boolean {
    return this.value7;
  }

  getValue8(): boolean {
    return this.value8;
  }
}

export class KidNFT extends ethereum.SmartContract {
  static bind(address: Address): KidNFT {
    return new KidNFT("KidNFT", address);
  }

  CURR_MINT_COST(): BigInt {
    let result = super.call("CURR_MINT_COST", "CURR_MINT_COST():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CURR_MINT_COST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CURR_MINT_COST",
      "CURR_MINT_COST():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_EACH_TYPE(): BigInt {
    let result = super.call("MAX_EACH_TYPE", "MAX_EACH_TYPE():(uint32)", []);

    return result[0].toBigInt();
  }

  try_MAX_EACH_TYPE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_EACH_TYPE", "MAX_EACH_TYPE():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TOKENS(): BigInt {
    let result = super.call("MAX_TOKENS", "MAX_TOKENS():(uint32)", []);

    return result[0].toBigInt();
  }

  try_MAX_TOKENS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_TOKENS", "MAX_TOKENS():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OPERATOR_FILTER_REGISTRY(): Address {
    let result = super.call(
      "OPERATOR_FILTER_REGISTRY",
      "OPERATOR_FILTER_REGISTRY():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_OPERATOR_FILTER_REGISTRY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OPERATOR_FILTER_REGISTRY",
      "OPERATOR_FILTER_REGISTRY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _walletsMinted(param0: Address): BigInt {
    let result = super.call(
      "_walletsMinted",
      "_walletsMinted(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try__walletsMinted(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_walletsMinted",
      "_walletsMinted(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInformations(): KidNFT__getInformationsResult {
    let result = super.call(
      "getInformations",
      "getInformations():(string,uint256[21],uint256[21],uint256,uint256,uint256,uint256,bool,bool)",
      []
    );

    return new KidNFT__getInformationsResult(
      result[0].toString(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBoolean()
    );
  }

  try_getInformations(): ethereum.CallResult<KidNFT__getInformationsResult> {
    let result = super.tryCall(
      "getInformations",
      "getInformations():(string,uint256[21],uint256[21],uint256,uint256,uint256,uint256,bool,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KidNFT__getInformationsResult(
        value[0].toString(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBoolean()
      )
    );
  }

  hasSaleStarted(): boolean {
    let result = super.call("hasSaleStarted", "hasSaleStarted():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasSaleStarted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasSaleStarted", "hasSaleStarted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onlyBeastListed(): boolean {
    let result = super.call("onlyBeastListed", "onlyBeastListed():(bool)", []);

    return result[0].toBoolean();
  }

  try_onlyBeastListed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onlyBeastListed",
      "onlyBeastListed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  teamReserveAddr(): Address {
    let result = super.call(
      "teamReserveAddr",
      "teamReserveAddr():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_teamReserveAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "teamReserveAddr",
      "teamReserveAddr():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uriManagerAddr(): Address {
    let result = super.call("uriManagerAddr", "uriManagerAddr():(address)", []);

    return result[0].toAddress();
  }

  try_uriManagerAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uriManagerAddr",
      "uriManagerAddr():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class MintHoodReserveCall extends ethereum.Call {
  get inputs(): MintHoodReserveCall__Inputs {
    return new MintHoodReserveCall__Inputs(this);
  }

  get outputs(): MintHoodReserveCall__Outputs {
    return new MintHoodReserveCall__Outputs(this);
  }
}

export class MintHoodReserveCall__Inputs {
  _call: MintHoodReserveCall;

  constructor(call: MintHoodReserveCall) {
    this._call = call;
  }

  get _typeB(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintHoodReserveCall__Outputs {
  _call: MintHoodReserveCall;

  constructor(call: MintHoodReserveCall) {
    this._call = call;
  }
}

export class MintNFTCall extends ethereum.Call {
  get inputs(): MintNFTCall__Inputs {
    return new MintNFTCall__Inputs(this);
  }

  get outputs(): MintNFTCall__Outputs {
    return new MintNFTCall__Outputs(this);
  }
}

export class MintNFTCall__Inputs {
  _call: MintNFTCall;

  constructor(call: MintNFTCall) {
    this._call = call;
  }

  get _typeB(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _typeG(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class MintNFTCall__Outputs {
  _call: MintNFTCall;

  constructor(call: MintNFTCall) {
    this._call = call;
  }
}

export class MintReservesCall extends ethereum.Call {
  get inputs(): MintReservesCall__Inputs {
    return new MintReservesCall__Inputs(this);
  }

  get outputs(): MintReservesCall__Outputs {
    return new MintReservesCall__Outputs(this);
  }
}

export class MintReservesCall__Inputs {
  _call: MintReservesCall;

  constructor(call: MintReservesCall) {
    this._call = call;
  }

  get _typeB(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _typeG(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintReservesCall__Outputs {
  _call: MintReservesCall;

  constructor(call: MintReservesCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetNewRoundCall extends ethereum.Call {
  get inputs(): SetNewRoundCall__Inputs {
    return new SetNewRoundCall__Inputs(this);
  }

  get outputs(): SetNewRoundCall__Outputs {
    return new SetNewRoundCall__Outputs(this);
  }
}

export class SetNewRoundCall__Inputs {
  _call: SetNewRoundCall;

  constructor(call: SetNewRoundCall) {
    this._call = call;
  }

  get cost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get perAddressLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get theTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get isOnlyBeastListed(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get saleState(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class SetNewRoundCall__Outputs {
  _call: SetNewRoundCall;

  constructor(call: SetNewRoundCall) {
    this._call = call;
  }
}

export class SetOnlyBeastListedCall extends ethereum.Call {
  get inputs(): SetOnlyBeastListedCall__Inputs {
    return new SetOnlyBeastListedCall__Inputs(this);
  }

  get outputs(): SetOnlyBeastListedCall__Outputs {
    return new SetOnlyBeastListedCall__Outputs(this);
  }
}

export class SetOnlyBeastListedCall__Inputs {
  _call: SetOnlyBeastListedCall;

  constructor(call: SetOnlyBeastListedCall) {
    this._call = call;
  }

  get _BeastListed(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetOnlyBeastListedCall__Outputs {
  _call: SetOnlyBeastListedCall;

  constructor(call: SetOnlyBeastListedCall) {
    this._call = call;
  }
}

export class SetSaleStartedCall extends ethereum.Call {
  get inputs(): SetSaleStartedCall__Inputs {
    return new SetSaleStartedCall__Inputs(this);
  }

  get outputs(): SetSaleStartedCall__Outputs {
    return new SetSaleStartedCall__Outputs(this);
  }
}

export class SetSaleStartedCall__Inputs {
  _call: SetSaleStartedCall;

  constructor(call: SetSaleStartedCall) {
    this._call = call;
  }

  get _state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSaleStartedCall__Outputs {
  _call: SetSaleStartedCall;

  constructor(call: SetSaleStartedCall) {
    this._call = call;
  }
}

export class SetTeamReserveAddrCall extends ethereum.Call {
  get inputs(): SetTeamReserveAddrCall__Inputs {
    return new SetTeamReserveAddrCall__Inputs(this);
  }

  get outputs(): SetTeamReserveAddrCall__Outputs {
    return new SetTeamReserveAddrCall__Outputs(this);
  }
}

export class SetTeamReserveAddrCall__Inputs {
  _call: SetTeamReserveAddrCall;

  constructor(call: SetTeamReserveAddrCall) {
    this._call = call;
  }

  get _teamReserveAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTeamReserveAddrCall__Outputs {
  _call: SetTeamReserveAddrCall;

  constructor(call: SetTeamReserveAddrCall) {
    this._call = call;
  }
}

export class SetURIManagerCall extends ethereum.Call {
  get inputs(): SetURIManagerCall__Inputs {
    return new SetURIManagerCall__Inputs(this);
  }

  get outputs(): SetURIManagerCall__Outputs {
    return new SetURIManagerCall__Outputs(this);
  }
}

export class SetURIManagerCall__Inputs {
  _call: SetURIManagerCall;

  constructor(call: SetURIManagerCall) {
    this._call = call;
  }

  get _uriManagerAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetURIManagerCall__Outputs {
  _call: SetURIManagerCall;

  constructor(call: SetURIManagerCall) {
    this._call = call;
  }
}

export class SetVerificationHashCall extends ethereum.Call {
  get inputs(): SetVerificationHashCall__Inputs {
    return new SetVerificationHashCall__Inputs(this);
  }

  get outputs(): SetVerificationHashCall__Outputs {
    return new SetVerificationHashCall__Outputs(this);
  }
}

export class SetVerificationHashCall__Inputs {
  _call: SetVerificationHashCall;

  constructor(call: SetVerificationHashCall) {
    this._call = call;
  }

  get _hash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetVerificationHashCall__Outputs {
  _call: SetVerificationHashCall;

  constructor(call: SetVerificationHashCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
